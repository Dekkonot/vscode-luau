{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "Roblox Lua/Luau",
	"patterns": [
		{
			"begin": "\\b(?:(local)\\s*)?(function)\\s*([a-zA-Z_]\\w*(?:[.:]([a-zA-Z_]\\w*))*)?\\(",
			"end": "\\)(?:\\s*(:)\\s*(.+?)(?=\\s*\\b(?:([^\\w.,<])|\\)>)\\s*\\w|\\s*$))?",
			"beginCaptures": {
				"1": {
					"name": "storage.modifier.local.luau"
				},
				"2": {
					"name": "keyword.control.luau"
				},
				"3": {
					"patterns": [
						{
							"match": "\\b(__add|__call|__concat|__div|__eq|__index|__le|__len|__lt|__metatable|__mod|__mode|__mul|__newindex|__pow|__sub|__tostring|__unm)\\b",
							"name": "variable.language.metamethod.luau"
						}
					],
					"name": "entity.name.function.luau"
				}
			},
			"endCaptures": {
				"1": {
					"name": "keyword.operator.type.luau"
				},
				"2": {
					"patterns": [
						{
							"include": "#type_literal"
						}
					]
				},
				"3": {
					"patterns": [
						{
							"match": ">",
							"name": "keyword.operator.type.luau"
						}
					]
				}
			},
			"patterns": [
				{
					"match": ":",
					"name": "keyword.operator.type.luau"
				},
				{
					"match": "(?<![:>.]\\s*)\\b_\\b",
					"name": "variable.parameter.luau"
				},
				{
					"match": "(?<![:>.]\\s*)\\b([A-Z_][A-Z0-9_]*)\\b",
					"name": "variable.other.constant.luau"
				},
				{
					"match": "(?<![:>.]\\s*)\\b([a-zA-Z_]\\w*)\\b",
					"name": "variable.parameter.luau"
				},
				{
					"include": "#type_literal"
				}
			],
			"contentName": "meta.parameters.luau",
			"name": "meta.function.luau"
		},
		{
			"begin": "\\b(?:(local)\\s+\\b)",
			"end": "(?=\\s*do\\b|\\s*[=;]|\\s*$)",
			"beginCaptures": {
				"1": {
					"name": "storage.modifier.local.luau"
				}
			},
			"patterns": [
				{
					"match": ":",
					"name": "keyword.operator.type.luau"
				},
				{
					"match": "(?<![:>.]\\s*)\\b_\\b",
					"name": "variable.parameter.luau"
				},
				{
					"match": "(?<![:>.]\\s*)\\b([A-Z_][A-Z0-9_]*)\\b",
					"name": "variable.other.constant.luau"
				},
				{
					"match": "(?<![:>.]\\s*)\\b([a-zA-Z_]\\w*)\\b",
					"name": "variable.other.luau"
				},
				{
					"include": "#type_literal"
				}
			]
		},
		{
			"match": "\\b(for)\\s+([^=]+)\\b(in)\\b",
			"captures": {
				"1": {
					"name": "keyword.control.luau"
				},
				"2": {
					"patterns": [
						{
							"match": ":",
							"name": "keyword.operator.type.luau"
						},
						{
							"match": "(?<![:>.]\\s*)\\b_\\b",
							"name": "variable.parameter.luau"
						},
						{
							"match": "(?<![:>.]\\s*)\\b([A-Z_][A-Z0-9_]*)\\b",
							"name": "variable.other.constant.luau"
						},
						{
							"match": "(?<![:>.]\\s*)\\b([a-zA-Z_]\\w*)\\b",
							"name": "variable.parameter.luau"
						},
						{
							"include": "#type_literal"
						}
					]
				},
				"3": {
					"name": "keyword.control.luau"
				}
			}
		},
		{
			"begin": "\\b(?:(export)\\s+)?(type)\\s+([^=]+)\\s*(=)",
			"end": "(?=\\s*$)|(?=\\s*;)",
			"beginCaptures": {
				"1": {
					"name": "storage.modifier.visibility.luau"
				},
				"2": {
					"name": "storage.type.luau"
				},
				"3": {
					"patterns": [
						{
							"match": "[<>]",
							"name": "keyword.operator.type.luau"
						},
						{
							"match": "\\b[a-zA-Z_]\\w*\\b",
							"name": "entity.name.type.alias.luau"
						}
					]
				},
				"4": {
					"name": "keyword.operator.assignment.luau"
				}
			},
			"patterns": [
				{
					"include": "#type_literal"
				}
			]
		},
		{
			"include": "#keywords"
		},
		{
			"include": "#standard_library"
		},
		{
			"include": "#operators"
		},
		{
			"include": "#numbers"
		},
		{
			"include": "#language_constants"
		},
		{
			"include": "#strings"
		},
		{
			"include": "#identifier"
		},
		{
			"include": "#comments"
		}
	],
	"repository": {
		"standard_library": {
			"patterns": [
				{
					"match": "\\b(delay|DebuggerManager|elapsedTime|PluginManager|printidentity|require|settings|spawn|stats|tick|time|typeof|UserSettings|version|wait|warn)\\b",
					"name": "support.function.luau"
				},
				{
					"match": "\\b(assert|collectgarbage|error|getfenv|getmetatable|ipairs|loadstring|newproxy|next|pairs|pcall|print|rawequal|rawset|select|setfenv|setmetatable|tonumber|tostring|type|unpack|xpcall)\\b",
					"name": "support.function.luau"
				},
				{
					"match": "\\b(_G|_VERSION|game|plugin|shared|script|workspace|Enum(?:\\.\\w+){0,2})\\b",
					"name": "support.constant.luau"
				},

				{
					"match": "\\b(Axes\\.(?:new)|BrickColor\\.(?:Black|Blue|DarkGray|Gray|Green|New|Random|Red|White|Yellow|new|palette|random)|CFrame\\.(?:Angles|fromAxisAngle|fromEulerAnglesXYZ|fromEulerAnglesYXZ|fromMatrix|fromOrientation|new)|Color3\\.(?:fromHSV|fromRGB|new|toHSV)|ColorSequence\\.(?:new)|ColorSequenceKeypoint\\.(?:new)|DateTime\\.(?:fromIsoDate|fromLocalTime|fromUniversalTime|fromUnixTimestamp|fromUnixTimestampMillis|now)|DockWidgetPluginGuiInfo\\.(?:new)|Faces\\.(?:new)|Instance\\.(?:new)|NumberRange\\.(?:new)|NumberSequence\\.(?:new)|NumberSequenceKeypoint\\.(?:new)|PathWaypoint\\.(?:new)|PhysicalProperties\\.(?:new)|Random\\.(?:new)|Ray\\.(?:new)|RaycastParams\\.(?:new)|Rect\\.(?:new)|Region3\\.(?:new)|Region3int16\\.(?:new)|TweenInfo\\.(?:new)|UDim\\.(?:new)|UDim2\\.(?:fromOffset|fromScale|new)|Vector2\\.(?:new)|Vector2int16\\.(?:new)|Vector3\\.(?:FromAxis|FromNormalId|fromAxis|fromNormalId|new)|Vector3int16\\.(?:new))\\b",
					"name": "support.function.luau"
				},
				{
					"match": "\\b(Axes|BrickColor|CFrame|Color3|ColorSequence|ColorSequenceKeypoint|DateTime|DockWidgetPluginGuiInfo|Faces|Instance|NumberRange|NumberSequence|NumberSequenceKeypoint|PathWaypoint|PhysicalProperties|Random|Ray|RaycastParams|Rect|Region3|Region3int16|TweenInfo|UDim|UDim2|Vector2|Vector2int16|Vector3|Vector3int16)\\b",
					"name": "support.constant.luau"
				},

				{
					"match":"\\b(bit32\\.(?:arshift|band|bnot|bor|btest|bxor|extract|lrotate|lshift|replace|rrotate|rshift)|coroutine\\.(?:create|isyieldable|resume|running|status|wrap|yield)|debug\\.(?:loadmodule|profilebegin|profileend|traceback)|math\\.(?:abs|acos|asin|atan|atan2|ceil|clamp|cos|cosh|deg|exp|floor|fmod|frexp|ldexp|log|log10|max|min|modf|noise|pow|rad|random|randomseed|round|sign|sin|sinh|sqrt|tan|tanh)|os\\.(?:clock|date|difftime|time)|string\\.(?:byte|char|find|format|gmatch|gsub|len|lower|match|pack|packsize|rep|reverse|split|sub|unpack|upper)|table\\.(?:concat|create|find|foreach|foreachi|getn|insert|maxn|move|pack|remove|sort|unpack)|utf8\\.(?:char|codepoint|codes|graphemes|len|nfcnormalize|nfdnormalize|offset))\\b",
					"name": "support.function.luau"
				},
				{
					"match": "\\b(bit32|coroutine|debug|math|math\\.huge|math\\.pi|os|string|table|utf8|utf8\\.charpattern)\\b",
					"name": "support.constant.luau"
				}
			]
		},
		"keywords": {
			"patterns": [
				{
					"match": "\\blocal\\b",
					"name": "storage.modifier.local.luau"
				},
				{
					"match": "\\b(break|do|else|for|if|elseif|return|then|repeat|while|until|end|function|in|continue)\\b",
					"name": "keyword.control.luau"
				},
				{
					"match":"(?<![:.])\\s*\\b(self)\\b",
					"captures": {
						"1": {
							"name": "variable.language.self.luau"
						}
					}
				},
				{
					"match": "\\b(__add|__call|__concat|__div|__eq|__index|__le|__len|__lt|__metatable|__mod|__mode|__mul|__newindex|__pow|__sub|__tostring|__unm)\\b",
					"name": "variable.language.metamethod.luau"
				},
				{
					"match": "(\\.\\.\\.)",
					"name": "keyword.other.unit.luau"
				}
			]
		},
		"operators": {
			"patterns": [
				{
					"match": "(\\+|-(?!-)|/|\\*|%|\\^)",
					"name": "keyword.operator.arithmetic.luau"
				},
				{
					"match": "\\b(and|or|not)\\b",
					"name": "keyword.operator.logical.luau"
				},
				{
					"match": "(\\+=|-=|/=|\\*=|%=|\\^=|\\.\\.=|=)",
					"name": "keyword.operator.assignment.luau"
				},
				{
					"match": "(\\.\\.|\\#)",
					"name": "keyword.operator.other.luau"
				},
				{
					"match": "(==|~=|>=|>|<=|<)",
					"name": "keyword.operator.comparison.luau"
				}
			]
		},
		"language_constants": {
			"patterns": [
				{
					"match": "\\btrue\\b",
					"name": "constant.language.boolean.true.luau"
				},
				{
					"match": "\\bfalse\\b",
					"name": "constant.language.boolean.false.luau"
				},
				{
					"match": "\\bnil\\b",
					"name": "constant.language.nil.luau"
				}
			]
		},
		"numbers": {
			"patterns": [
				{
					"match": "\\b0_?[xX][0-9a-fA-F_]+",
					"name": "constant.numeric.hex.luau"
				},
				{
					"match": "\\b0_?[bB][01_]+(?:[eE][+-]?(?:\\d[0-9_]*(?:\\.[0-9_]*)?|\\.[0-9]+))?",
					"name": "constant.numeric.binary.luau"
				},
				{
					"match": "\\b\\d[0-9_]*(?:\\.[0-9_]*)?(?:[eE][+-]?(?:\\d[0-9_]*(?:\\.[0-9_]*)?|\\.[0-9]+))?|\\.[0-9]+",
					"name": "constant.numeric.decimal.luau"
				}
			]
		},
		"strings": {
			"patterns": [
				{
					"begin": "\"",
					"end": "\"",
					"patterns": [
						{"include": "#string_escape"}
					],
					"name": "string.quoted.double.luau"
				},
				{
					"begin": "'",
					"end": "'",
					"patterns": [
						{"include": "#string_escape"}
					],
					"name": "string.quoted.single.luau"
				},
				{
					"begin": "\\[(=*)\\[",
					"end": "\\]\\1\\]",
					"name": "string.other.multiline.luau"
				}
			]
		},
		"string_escape": {
			"patterns": [
				{
					"comment": "As it turns out, because backslashes have to be escaped in both JSON and Regex, a single backslash is represented as 4 here",
					"match": "\\\\[abfnrtvz'\"\\\\]",
					"name": "constant.character.escape.luau"
				},
				{
					"match": "\\\\\\d{1,3}",
					"name": "constant.character.escape.luau"
				},
				{
					"match": "\\\\x[0-9a-fA-F]{2}",
					"name": "constant.character.escape.luau"
				},
				{
					"match": "\\\\u\\{[0-9a-fA-F]*\\}",
					"name": "constant.character.escape.luau"
				}
			]
		},
		"identifier": {
			"patterns": [
				{
					"match": "\\b([A-Z_][A-Z0-9_]*)\\b",
					"name": "variable.other.constant.luau"
				},
				{
					"match": "\\b[a-zA-Z_]\\w*(?=:)",
					"name": "entity.name.class.luau"
				},
				{
					"match": "\\b[a-zA-Z_]\\w*(?=\\()",
					"name": "entity.name.function.luau"
				},
				{
					"match": "(?<=\\.)([a-zA-Z_]\\w*)\\b",
					"name": "support.variable.property.luau"
				},
				{
					"match": "\\b([a-zA-Z_]\\w*)\\b",
					"name": "variable.other.readwrite.luau"
				}
			]
		},
		"comments": {
			"patterns": [
				{
					"begin": "--\\[(=*)\\[",
					"end": "\\]\\1\\]",
					"name": "comment.block.luau"
				},
				{
					"begin": "--",
					"end": "$",
					"name": "comment.line.double-dash.luau",
					"patterns": [
						{
							"match": "@\\w+",
							"name": "storage.type.class.luau"
						},
						{
							"match": "!(strict|nonstrict|nocheck)\\s*$",
							"name": "markup.bold.luau"
						},
						{
							"match": "!nolint(?:\\s+[a-zA-Z_]\\w*)\\s*$",
							"name": "markup.bold.luau"
						}
					]
				}
			]
		},
		"type_literal": {
			"patterns": [
				{
					"match": "(\\?)",
					"name": "keyword.operator.type.luau"
				},
				{
					"match": "(->)",
					"name": "keyword.operator.type.luau"
				},
				{
					"begin": "\\b(typeof)\\b\\s*\\(",
					"end": "(?=\\))",
					"beginCaptures": {
						"1": {
							"name": "support.function.luau"
						}
					},
					"patterns": [
						{
							"include": "source.luau"
						}
					]
				},
				{
					"begin": "\\b([a-zA-Z]\\w*)\\b(<)",
					"end": "(>)",
					"beginCaptures": {
						"1": {
							"name": "entity.name.type.luau"
						},
						"2": {
							"name": "keyword.operator.type.luau"
						}
					},
					"endCaptures": {
						"1": {
							"name": "keyword.operator.type.luau"
						}
					},
					"patterns": [
						{
							"include": "#type_literal"
						}
					],
					"contentName": "meta.parameter.type.variable"
				},
				{
					"match": "\\b(nil|string|number|boolean|thread|userdata|any)\\b",
					"name": "support.type.primitive.luau"
				},
				{
					"match": "\\b([a-zA-Z]\\w*)\\b",
					"name": "entity.name.type.luau"
				},
				{
					"begin": "\\{",
					"end": "\\}",
					"patterns": [
						{
							"match": ":",
							"name": "keyword.operator.type.luau"
						},
						{
							"begin": "\\[",
							"end": "\\]",
							"patterns": [
								{
									"include": "#type_literal"
								}
							]
						},
						{
							"match": "(?<!:\\s*|->\\s*)\\b([a-zA-Z_]\\w*)\\b",
							"name": "variable.other.field.luau"
						},
						{
							"include": "#type_literal"
						}
					]
				},
				{
					"begin": "\\(",
					"end": "\\)",
					"patterns": [
						{
							"include": "#type_literal"
						}
					]
				}
			]
		}
	},
	"scopeName": "source.luau"
}